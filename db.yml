apiVersion: apps/v1
kind: Deployment
metadata:
  name:  postgres
  namespace: default
  labels:
    app:  postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app:  postgres
        tier: postgres
    spec:
      containers:
      - name:  postgres
        image:  postgres:13
#Discuss on the resources before deployment        
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 100m
            memory: 100Mi
        # livenessProbe:
        #   tcpSocket:
        #     port: 5432
        #   initialDelaySeconds: 5
        #   timeoutSeconds: 5
        #   successThreshold: 1
        #   failureThreshold: 3
        #   periodSeconds: 10
        # readinessProbe:
        #   tcpSocket:
        #     port: 5432
        #   initialDelaySeconds: 5
        #   timeoutSeconds: 2
        #   successThreshold: 1
        #   failureThreshold: 3
        #   periodSeconds: 10
        env:
        - name: BACKEND_CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              key: BACKEND_CORS_ORIGINS
              name: db-configmap
        - name: BOT_EMAIL
          valueFrom:
            configMapKeyRef:
              key: BOT_EMAIL
              name: db-configmap
        - name: BOT_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: BOT_PASSWORD
              name: db-configmap
        - name: BOT_USERNAME
          valueFrom:
            configMapKeyRef:
              key: BOT_USERNAME
              name: db-configmap
        - name: DOCKER_IMAGE_BACKEND
          valueFrom:
            configMapKeyRef:
              key: DOCKER_IMAGE_BACKEND
              name: db-configmap
        - name: DOCKER_IMAGE_CELERYWORKER
          valueFrom:
            configMapKeyRef:
              key: DOCKER_IMAGE_CELERYWORKER
              name: db-configmap
        - name: DOCKER_IMAGE_FRONTEND
          valueFrom:
            configMapKeyRef:
              key: DOCKER_IMAGE_FRONTEND
              name: db-configmap
        - name: DOMAIN
          valueFrom:
            configMapKeyRef:
              key: DOMAIN
              name: db-configmap
        - name: EMAILS_FROM_EMAIL
          valueFrom:
            configMapKeyRef:
              key: EMAILS_FROM_EMAIL
              name: db-configmap
        - name: FIRST_SUPERUSER
          valueFrom:
            configMapKeyRef:
              key: FIRST_SUPERUSER
              name: db-configmap
        - name: FIRST_SUPERUSER_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: FIRST_SUPERUSER_PASSWORD
              name: db-configmap
        - name: FIRST_SUPERUSER_USERNAME
          valueFrom:
            configMapKeyRef:
              key: FIRST_SUPERUSER_USERNAME
              name: db-configmap
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_DB
              name: db-configmap
        - name: POSTGRES_DB_PORT
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_DB_PORT
              name: db-configmap
        - name: POSTGRES_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_PASSWORD
              name: db-configmap
        - name: POSTGRES_SERVER
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_SERVER
              name: db-configmap
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              key: POSTGRES_USER
              name: db-configmap
        - name: PROJECT_NAME
          valueFrom:
            configMapKeyRef:
              key: PROJECT_NAME
              name: db-configmap
        - name: SECRET_KEY
          valueFrom:
            configMapKeyRef:
              key: SECRET_KEY
              name: db-configmap
        - name: SENTRY_DSN
          valueFrom:
            configMapKeyRef:
              key: SENTRY_DSN
              name: db-configmap
        - name: SMTP_HOST
          valueFrom:
            configMapKeyRef:
              key: SMTP_HOST
              name: db-configmap
        - name: SMTP_PASSWORD
          valueFrom:
            configMapKeyRef:
              key: SMTP_PASSWORD
              name: db-configmap
        - name: SMTP_PORT
          valueFrom:
            configMapKeyRef:
              key: SMTP_PORT
              name: db-configmap
        - name: SMTP_TLS
          valueFrom:
            configMapKeyRef:
              key: SMTP_TLS
              name: db-configmap
        - name: SMTP_USER
          valueFrom:
            configMapKeyRef:
              key: SMTP_USER
              name: db-configmap
        - name: STACK_NAME
          valueFrom:
            configMapKeyRef:
              key: STACK_NAME
              name: db-configmap
        - name: TAG
          valueFrom:
            configMapKeyRef:
              key: TAG
              name: db-configmap
        - name: USERS_OPEN_REGISTRATION
          valueFrom:
            configMapKeyRef:
              key: USERS_OPEN_REGISTRATION
              name: db-configmap                          
        ports:
        - containerPort:  5432
          name:  postgres
        - containerPort:  6432
          name:  postgres2
        volumeMounts:
        - name: localtime
          mountPath: /etc/localtime
      volumes:
        - name: localtime
          hostPath:
            path: /usr/share/zoneinfo/Asia/Shanghai
      restartPolicy: Always

# apiVersion: v1
# kind: Service
# metadata:
#   name: db-service
# #  name: http-lb
#   annotations:
#     service.beta.kubernetes.io/do-loadbalancer-protocol: "http"
#     service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-type: "cookies"
#     service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-cookie-name: "example"
#     service.beta.kubernetes.io/do-loadbalancer-sticky-sessions-cookie-ttl: "60"
# spec:
#   selector:
#     app: postgres
#     tier: postgres
#   type: NodePort
#   externalTrafficPolicy: Local
#   ports:
#     - protocol: TCP
#       port: 6432
#       targetPort: 6432
#       nodePort: 30000

---
apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 6432
      targetPort: 6432

---
apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  selector:
    app: postgres
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
